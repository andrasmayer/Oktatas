// FileSaver.esm.js
"use strict";

function autoBom(blob, opts) {
  if (typeof opts === "undefined") {
    opts = { autoBom: false };
  } else if (typeof opts !== "object") {
    console.warn("Deprecated: Expected third argument to be an object");
    opts = { autoBom: !opts };
  }

  if (
    opts.autoBom &&
    /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(
      blob.type
    )
  ) {
    return new Blob(["\uFEFF", blob], { type: blob.type });
  }
  return blob;
}

function click(node) {
  try {
    node.dispatchEvent(new MouseEvent("click"));
  } catch (e) {
    var evt = document.createEvent("MouseEvents");
    evt.initMouseEvent(
      "click",
      true,
      true,
      window,
      0,
      0,
      0,
      80,
      20,
      false,
      false,
      false,
      false,
      0,
      null
    );
    node.dispatchEvent(evt);
  }
}

function isFileSaverSupported() {
  return (
    typeof window !== "undefined" &&
    window.navigator &&
    /MSIE 10/.test(window.navigator.userAgent) === false
  );
}

function saveAs(blob, name, opts) {
  opts = opts || {};

  if (!isFileSaverSupported()) {
    console.error("FileSaver is not supported in this browser.");
    return;
  }

  blob = autoBom(blob, opts);

  var URL = window.URL || window.webkitURL;
  var a = document.createElement("a");
  a.href = URL.createObjectURL(blob);
  a.download = name || "download";
  a.rel = "noopener"; // security

  setTimeout(function () {
    URL.revokeObjectURL(a.href);
  }, 40000); // 40s

  setTimeout(function () {
    click(a);
  }, 0);
}

export { saveAs };
